https://leetcode.com/problems/non-decreasing-array/

Given an array with n integers, your task is to check if it could become non-decreasing by modifying at most 1 element.
We define an array is non-decreasing if array[i] <= array[i + 1] holds for every i (1 <= i < n).
Example 1:
Input: [4,2,3]
Output: True
Explanation: You could modify the first 4 to 2 to get a non-decreasing array. [2 2 3]
Example 2:
Input: [4,2,1]
Output: False
Explanation: You can't get a non-decreasing array by modify at most one element.

class Solution {
    /*
    When you find nums[i-1] > nums[i], you will prefer to change nums[i-1]'s value, 
    7 10 9 becomes 
    7 9  9  (i-1 is changed)
    But, if you also find nums[i-2] > nums[i], then you have to change nums[i]'s value instead, 
    7 10 5 becomes 
    7 10 10 (i is changed)
    */
    public boolean checkPossibility(int[] nums) {
        int count = 0;
        for(int i=1;i<nums.length;i++){
            if(nums[i]<nums[i-1]){
                count++;
                
                if(count>1) return false;
                
                if(i>=2 && nums[i] < nums[i-2])
                    nums[i] = nums[i-1];
                else
                    nums[i-1] = nums[i];
            }
        }
        return count<=1;
    }
}
