class Solution {
    public int climbStairs(int n) {
        if(n==0)
            return 0;
        int []a = new int[n+1];
        Arrays.fill(a,0);
        return climbStairs(a,0,n);
    }
    private int climbStairs(int []a, int i, int n){
        if(i==n) {
            return 1;
        }
        if(i>n)
            return 0;
        if(a[i]==0) {
             a[i] = climbStairs(a,i+1,n) + climbStairs(a,i+2,n);
        }
        return a[i];
    }
}

// First solution without memoization 
/*
public int climbStairs(int n) {
        if(n==0)
            return 0;
        return climbStairs(0, n);
    }
    private int climbStairs(int i, int n){
        if(i==n)
            return 1;
        if(i>n)
            return 0;
        return climbStairs(i+1,n) + climbStairs(i+2,n);
    }
*/
