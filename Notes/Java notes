int[] duplicate = nums.clone(); // nums is int[] it generates deep copy 
nums.length // gives array length 

Random rand = new Random();
rand.nextInt(aux.size());

String a = new String("");
a.length()

List<Integer> a = new ArrayList();
a.add(),a.remove(index); a.size();

// Map iterator
Iterator<Map.Entry<Integer, Integer>> entries = map.entrySet().iterator();
while (entries.hasNext()) {
    Map.Entry<Integer, Integer> entry = entries.next();
.....
}

// getOrDefault()
This method return already existing value or returns the default value which is 2nd argument of the method 
Map locations = new HashMap<String, ArrayList<Integer>>();
arrayList = locations.get("TEMP",new ArrayList<Integer>()); // sample call 

The Integer, String, Float, Double, Byte, Long, Short, Boolean, and Character classes are all examples of an immutable class.
By definition, you may not alter the value of an immutable object after its construction.
Of course, if you need to alter your Integer, String... instances you are out of luck. 
