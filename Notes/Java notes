int[] original = nums.clone(); // nums is int[] it gice the copy 
nums.length // gives array length 

Random rand = new Random();
rand.nextInt(aux.size());

String a = new String("");
a.length()

List<Integer> a = new ArrayList();
a.add(),a.remove(index); a.size();

// Map iterator
Iterator<Map.Entry<Integer, Integer>> entries = map.entrySet().iterator();
while (entries.hasNext()) {
    Map.Entry<Integer, Integer> entry = entries.next();
.....
}

// getOrDefault()
This method return already existing value or returns the default value which is 2nd argument of the method 
Map locations = new HashMap<String, ArrayList<Integer>>();
arrayList = locations.get("TEMP",new ArrayList<Integer>()); // sample call 

The Integer, String, Float, Double, Byte, Long, Short, Boolean, and Character classes are all examples of an immutable class.
By definition, you may not alter the value of an immutable object after its construction.
Of course, if you need to alter your Integer, String... instances you are out of luck. 


We use PriorityQueue class to implement Heaps in Java. By default Min Heap is implemented by this class. 
To implement Max Heap, we use Collections.reverseOrder()
 
 MAX HEAP 
 PriorityQueue<Integer> pQueue = new PriorityQueue<Integer>(Collections.reverseOrder()); 
 // same as queue operation
 pQueue.add(m)   // log n
 pQueue.poll()  // log n 
 pQueue.peek()
 pQueue.remove(m);  // Removing Java using remove() 
A Max Heap is a Complete Binary Tree. A Max heap is typically represented as an array. The root element will be at Arr[0]. 
Below table shows indexes of other nodes for the ith node, i.e., Arr[i]:
Arr[(i-1)/2] Returns the parent node.
Arr[(2*i)+1] Returns the left child node.
Arr[(2*i)+2] Returns the right child node.
