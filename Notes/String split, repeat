String[] aString = str.split(" ");
for(String st : aString){
     System.out.print("a="+st);
}
"  4 33"
a=a=a=4a=33

str.split(" +"); will match one or more space 
a=a=4a=33
to split for with . in a string you have to put "[.]"
because . is special character that matches everything 

 aString = str.split("\\W+");
 return only words : 
 String str = "id-INT, name-STRING,";
 [id, INT, name, STRING]


StringBuilder str = new StringBuilder(new String(".").repeat(size));
This is good to have when you need base case with 'n' repeat characters OR String.

Source: http://stackoverflow.com/questions/4679746/time-complexity-of-javas-substring
        http://stackoverflow.com/questions/16123446/java-7-string-substring-complexity
        http://stackoverflow.com/questions/25514062/what-is-the-time-complexity-of-java-stringbuilder-substring-method-if-it-is-l

Explanation:
It was O(1) in older versions of Java - as Jon stated, it just created a new String with the same underlying char[],
and a different offset and length.
However, this has actually changed started with Java 7 update 6.
The char[] sharing was eliminated, and the offset and length fields were removed. substring() now just copies all the 
characters into a new String.
Ergo, substring is O(n) in Java 7 update
