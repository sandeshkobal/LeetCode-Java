
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
 
public class Main {
 
    public static void main(String[] args) {
        permutation("", "ABCD");
        System.out.println();
        permutationAvoidDuplicate("ABCA");
    }
  
    public static void permutation(String pred, String str){
        if(str.isEmpty())
            System.out.print(pred +"\t");
 
        for(int i = 0; i<str.length();i++){
            String tempPred = pred + str.charAt(i); // see charAt not get
            String tempStr =  str.substring(0,i)+str.substring(i+1);
            // ABC {pred=B then str=AC, pred=C then str=AB }
            permutation(tempPred,tempStr);
        }
    }
    
    public static void permutationAvoidDuplicate(String str){
        char[] chars = str.toCharArray();
        char[] result = new char[chars.length];
        Map<Character,Integer> countMap = new HashMap<Character, Integer>();
        for( char ch : chars){
            if(countMap.containsKey(ch)){
                countMap.put(ch,countMap.get(ch)+1);
            } else {
                countMap.put(ch,1);
            }
        }
        char[] input = new char[countMap.size()];
        int[] count = new int[countMap.size()];
        int j=0;
        for(Map.Entry<Character,Integer> entry : countMap.entrySet()){
            input[j] = entry.getKey().charValue();
            count[j] = entry.getValue().intValue();
            j++;
        }
 
        System.out.println();
        System.out.println(str);
        System.out.println("Input " + new String(input));
        System.out.println("Count " + Arrays.toString(count));
 
 
        permutationAvoidDuplicate(input,count,result,0);
    }
 
    public static void permutationAvoidDuplicate(final char[] input, int[] count, char[] result, int level) {
        if(level==result.length){
            System.out.print(new String(result) + "\t");
        }
        for (int i=0;i<count.length;i++){
            if(count[i]==0)
                continue;
 
            count[i]--;
            result[level] = input[i];
            permutationAvoidDuplicate(input,count,result,level+1);
            count[i]++;
        }
    }
}

