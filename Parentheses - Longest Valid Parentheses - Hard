https://leetcode.com/problems/longest-valid-parentheses/

Input : )()())
output: 4

Solution 1: 
/*
The workflow of the solution is as below.

1 Scan the string from beginning to end.
2 If current character is '(', push its index to the stack. 
    If current character is ')' and the character at the index of the top of stack is '(', we just find a
    matching pair so pop from the stack. Otherwise, we push the index of ')' to the stack.
3 If the stack is empty, the whole input string is valid.
4 else After the scan is done, the stack will only
    contain the indices of characters which couldnt be matched. 
    Then we take the diff between indices int stack one by one and calculate the maxlen.
    The diff between indices are the valid parenthesis substrings.
*/

class Solution {
    public int longestValidParentheses(String s) {
        int n = s.length(), longest = 0;
        Stack<Integer> st = new Stack<Integer>();
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '(') 
                st.push(i);
            else {
                if (!st.empty() && s.charAt(st.peek()) == '(') 
                    st.pop();
                else
                    st.push(i); // didnt match push 
            }
        }
        
        if (st.empty()) 
            longest = n; // whole string is valid
        else {
            int a = n, b = 0;
            while (!st.empty()) {
                b = st.pop();
                longest = Math.max(longest, a-b-1);
                a = b;
            }
            longest = Math.max(longest, a);
        }
        return longest;
    }
}





Solution 2 : https://leetcode.com/problems/longest-valid-parentheses/solution/ 
      Approach 3 using stack - good video  O(n)
      
Input : )()())
output: 4

we start by pushing -1 onto the stack.
For every \text{‘(’}‘(’ encountered, we push its index onto the stack.
For every \text{‘)’}‘)’ encountered, we pop the topmost element and subtract the current element's index from the top element of the stack, 
which gives the length of the currently encountered valid string of parentheses. 
If while popping the element, the stack becomes empty, we push the current element's index onto the stack. 
In this way, we keep on calculating the lengths of the valid substrings, and return the length of the longest 
valid string at the end.

class Solution {
    public int longestValidParentheses(String s) {
        int maxans = 0;
        Stack<Integer> stack = new Stack<>();
        stack.push(-1);
        for (int i = 0; i < s.length(); i++) {
            if(s.charAt(i) == '('){
                stack.push(i);
            } else {
                stack.pop();    
                if(stack.isEmpty()){ 
                    // if input )... so we popped -1  
                    // also for input - ))()()()  we should be calculating 6  because we keep concatinatin valid ones
                    // so we need to push index of unmatched )
                    stack.push(i);
                } else{
                    maxans = Math.max(maxans,i-stack.peek());
                }
            }
        }
        return maxans;
    }
}
