/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
  1->2->3->4->5, and n = 2.
  1->2->3->5.
  
  inp : 1->2 n=2         1 n=1
  out : 2                null
class Solution {
    // you need dummy node before head to remove head 
    // diff between fast and slow should be n+1
    // Fast should be pointing to null in the end and 
    // slow should be pointing to a one node before the deleting one 
    //  1->2,2                            1,1
    // dummy(START)->1>2->null(Fast)   
    public ListNode removeNthFromEnd(ListNode head, int n) {
    
        ListNode START = new ListNode(0);
        ListNode slow = START, fast = START;
        slow.next = head;

        //Move fast in front so that the gap between slow and fast becomes n+1
        for(int i=0; i<=n; i++)   { // n+1 iterations
            fast = fast.next;
        }
        //Move fast to the end, maintaining the gap
        while(fast != null) {
            slow = slow.next;
            fast = fast.next;
        }
        //Skip the desired node
        slow.next = slow.next.next;
        
        return START.next;
    }
}
