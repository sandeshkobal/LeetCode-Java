
consistent hashing is a special kind of hashing such that when a hash table is resized,
only K/n keys need to be remapped on average, where K is the number of keys, and n is the number of slots. 

In contrast, in most traditional hash tables, a change in the number of array slots causes nearly all keys to be remapped 
because the mapping between the keys and the slots is defined by a modular operation.

Distributed Hash Table (DHT) is one of the fundamental components used in distributed scalable systems. Hash Tables need a key, a value, and a hash function where hash function maps the key to a location where the value is stored.

index = hash_function(key)
Suppose we are designing a distributed caching system. Given ‘n’ cache servers, an intuitive hash function would be ‘key % n’. It is simple and commonly used. But it has two major drawbacks:

It is NOT horizontally scalable. Whenever a new cache host is added to the system, all existing mappings are broken. It will be a pain point in maintenance if the caching system contains lots of data. Practically, it becomes difficult to schedule a downtime to update all caching mappings.
It may NOT be load balanced, especially for non-uniformly distributed data. In practice, it can be easily assumed that the data will not be distributed uniformly. For the caching system, it translates into some caches becoming hot and saturated while the others idle and are almost empty.
In such situations, consistent hashing is a good way to improve the caching system.

https://www.youtube.com/watch?v=zaRkONvyGr8
http://michaelnielsen.org/blog/consistent-hashing/
http://s3.amazonaws.com/AllThingsDistributed/sosp/amazon-dynamo-sosp2007.pdf

Amazon DynamoDB is a key-value and document database that delivers single-digit millisecond performance at any scale. 
This uses consisten hashing.

once a node fails in a ring what do we do? Ofcourse we can replicate the data on other servers.
We can have replication in next two available nodes. So B data is availabe in C and D.
range (A,B). range (B,C) range (C,D) range (D,E) 
Server:  B          C         D         E

Cassandra also used it. 
https://blog.imaginea.com/consistent-hashing-in-cassandra/
