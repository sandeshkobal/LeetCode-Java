talking to inteviewer will give a lot of idea how you will build this up. 
get the requirements that gives the functions and variables needed in the class.   
get the user and use cases this helps to understand system better. 
draw raw classes before you start writting code.  

identify system mein kaun kaun players hain, 
woh saare tere objects honge so jo bhi objects hain unki classes
aur second step kya hai ki unki interaction kya hai aapas mein
uske baad mein interfaces dikha, abstract classes, etc

Interviewers are looking for one main thing: finding the right balance between a solution that works immediately and is also adaptable to change in the future.

To simplify things, you can take the following approach for any OOD question you encounter:

Clarify the requirements: 
Make sure you understand the expectations of the interviewer. 
Ask clarifying questions if at all necessary — the interviewer will not mind, and will likely appreciate it. 
For example, “are you looking for me to demonstrate the structure of a solution, or to fully implement it?” 
Doing this here will take about 5–10 seconds, but save tremendous amounts of time later.

Hash out the primary use cases: 
Think about, and then talk through, use cases. Make sure you understand all
the different functionality your system is expected to have. Talking about it out loud can also help you
to come across expectations or ideas you might not have realized if you just jumped right in.

Identify key Objects:
Now, identify all the objects that will play a role in your solution. 
For example, if you’re designing a parking lot, these will be things like vehicles, parking spots,
parking garages, entrances, exits, garage operators, etc.

Identify Operations supported by Objects: 
Work out all the behaviors you’d expect each object that you identified in the previous step to have. 
For example, a car should be able to move, park in a given spot, and hold a license plate.
A parking spot should be able to accommodate a two-wheeled vehicle or a four-wheeled vehicle — and so on.

Identify Interactions between Objects: 
Map out the relationships between the different objects that will need to interface with each other. 
This is where it all comes together. For example, a car should be able to park in a parking spot. 
Parking garages should be able to fit multiple parking spots, and so on.


https://danonrockstar.com/how-to-interview-object-oriented-design-60de0176dfbd

