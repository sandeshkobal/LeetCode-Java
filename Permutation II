https://leetcode.com/problems/permutations-ii/
// Duplicate numbers 
class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
         List<List<Integer>>  ans = new ArrayList<List<Integer>>();
        if(nums.length == 0)
            return ans;
        
        Map<Integer,Integer> map = new<Integer,Integer>HashMap();
        for(int n : nums){
            Integer i = map.getOrDefault(n,0);
            map.put(n,i+1);
        }
        
        int[] count = new int[map.size()];
        int[] numbers = new int[map.size()];
        Arrays.fill(count,0);
        int i=0;
        for(Map.Entry<Integer,Integer> e : map.entrySet()){
            numbers[i] = e.getKey().intValue();
            count[i] = e.getValue().intValue();
            i++;    
        }
        
        List<Integer> perm = new ArrayList<Integer>();
        permuteAvoidDuplicates(numbers,count,ans,nums.length,perm); 
        return ans;
    }
    
    private void permuteAvoidDuplicates(int[] numbers,int[] count, List<List<Integer>> ans, int ansSize, List<Integer> perm){
        if(perm.size()==ansSize){
            ans.add(new ArrayList<Integer>(perm));
        }
        
        for(int i=0;i<count.length;i++){
            if(count[i]==0)
                continue;
            
            perm.add(numbers[i]);
            count[i]--;
            permuteAvoidDuplicates(numbers,count,ans,ansSize,perm);
            count[i]++;
            perm.remove(perm.size()-1); 
            
        }
    }
}
